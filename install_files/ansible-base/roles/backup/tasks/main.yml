---
  # TODO the version is hardcoded into the collect.py script name and ansible
  # task. This should be changed in the ansible task to use a group_var with the
  # version or to read it from the securedrop_code version.py
- name: Copy the collect.py script to the Application Server /tmp directory
  copy:
    src: 0.3_collect.py
    dest: /tmp/
    owner: root
    mode: '0770'
  tags:
    - collect
    - script
    - permissions

  # This runs the backup script to collect the following items from the app-server:
  #   - tor config
  #   - tor services directory
  #   - securedrop_data directory
  #   - securedrop_code/config.py
  #   - custom header image (if applicable)
  # These files are packed into a gpg encrypted zipfile with filename
  # format: sd-backup-TIMESTAMP.zip.gpg
- name: Run the collect script to backup all the needed files to perform a restore
  # IMPORTANT: chdir must be specified in one-liner syntax when using async.
  # This is a bug in Ansible, see: https://github.com/ansible/ansible/issues/9693
  command: chdir=/tmp /tmp/0.3_collect.py
  # Long-running installs may have more submissions, which means retrieving
  # the files for backup will take longer. Make this task async, so
  # the rest of the playbook can run in tandem.
  async: 300
  poll: 10
  register: backup_filename
  tags:
    - collect
    - script

- name: Fetch the created backup file back to the Admin Workstation's ansible_base directory.
  fetch:
    src: /tmp/{{ backup_filename.stdout }}.gpg
    dest: ./{{ backup_filename.stdout }}.gpg
    flat: yes
    fail_on_missing: yes
  tags:
    - fetch

- name: Secure-delete the backup zip from the Application Server.
  command: srm /tmp/{{ backup_filename.stdout }}
  async: 300
  poll: 10
  tags:
    - srm

- name: Secure-delete the encrypted backup from the Application Server.
  command: srm /tmp/{{ backup_filename.stdout }}.gpg
  async: 300
  poll: 10
  tags:
    - srm

  # TODO: consider moving restore tasks to separate yaml file.
- name: Restore | Copy migration script to the Application Server.
  copy:
    src: 0.3_restore.py
    dest: /tmp/
    owner: root
    mode: '770'
  when: backup_zip is defined
  tags:
    - script
    - restore
    - permissions

- name: Restore | Copy backup zip file for restore to Application Server.
  copy:
    src: "{{ backup_zip }}"
    dest: /tmp/{{ backup_zip }}
  when: backup_zip is defined
  tags:
    - restore

- name: Restore | Run the restore.py script.
  shell: /tmp/0.3_restore.py /tmp/{{ backup_zip }}
  when: backup_zip is defined
  tags:
    - restore

- name: Restore | Secure-delete the restore file.
  command: srm /tmp/{{ backup_zip }}
  async: 300
  poll: 10
  when: backup_zip is defined
  tags:
    - restore
    - srm
